// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/s-gurman/user-segmentation/internal/handler/http (interfaces: SegmentationUseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	t "github.com/s-gurman/user-segmentation/internal/t"
	gomock "go.uber.org/mock/gomock"
)

// MockSegmentationUseCase is a mock of SegmentationUseCase interface.
type MockSegmentationUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentationUseCaseMockRecorder
}

// MockSegmentationUseCaseMockRecorder is the mock recorder for MockSegmentationUseCase.
type MockSegmentationUseCaseMockRecorder struct {
	mock *MockSegmentationUseCase
}

// NewMockSegmentationUseCase creates a new mock instance.
func NewMockSegmentationUseCase(ctrl *gomock.Controller) *MockSegmentationUseCase {
	mock := &MockSegmentationUseCase{ctrl: ctrl}
	mock.recorder = &MockSegmentationUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentationUseCase) EXPECT() *MockSegmentationUseCaseMockRecorder {
	return m.recorder
}

// CreateSegment mocks base method.
func (m *MockSegmentationUseCase) CreateSegment(arg0 context.Context, arg1 string, arg2 float32) (int, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockSegmentationUseCaseMockRecorder) CreateSegment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockSegmentationUseCase)(nil).CreateSegment), arg0, arg1, arg2)
}

// DeleteSegment mocks base method.
func (m *MockSegmentationUseCase) DeleteSegment(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockSegmentationUseCaseMockRecorder) DeleteSegment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockSegmentationUseCase)(nil).DeleteSegment), arg0, arg1)
}

// GetUserExperiments mocks base method.
func (m *MockSegmentationUseCase) GetUserExperiments(arg0 context.Context, arg1 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserExperiments", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserExperiments indicates an expected call of GetUserExperiments.
func (mr *MockSegmentationUseCaseMockRecorder) GetUserExperiments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserExperiments", reflect.TypeOf((*MockSegmentationUseCase)(nil).GetUserExperiments), arg0, arg1)
}

// UpdateExperiments mocks base method.
func (m *MockSegmentationUseCase) UpdateExperiments(arg0 context.Context, arg1 int, arg2, arg3 []string, arg4 *t.CustomTime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExperiments", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExperiments indicates an expected call of UpdateExperiments.
func (mr *MockSegmentationUseCaseMockRecorder) UpdateExperiments(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExperiments", reflect.TypeOf((*MockSegmentationUseCase)(nil).UpdateExperiments), arg0, arg1, arg2, arg3, arg4)
}
