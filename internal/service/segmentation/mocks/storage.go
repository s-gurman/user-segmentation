// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/s-gurman/user-segmentation/internal/domain"
	t "github.com/s-gurman/user-segmentation/internal/t"
	gomock "go.uber.org/mock/gomock"
)

// MockExperimentStorage is a mock of ExperimentStorage interface.
type MockExperimentStorage struct {
	ctrl     *gomock.Controller
	recorder *MockExperimentStorageMockRecorder
}

// MockExperimentStorageMockRecorder is the mock recorder for MockExperimentStorage.
type MockExperimentStorageMockRecorder struct {
	mock *MockExperimentStorage
}

// NewMockExperimentStorage creates a new mock instance.
func NewMockExperimentStorage(ctrl *gomock.Controller) *MockExperimentStorage {
	mock := &MockExperimentStorage{ctrl: ctrl}
	mock.recorder = &MockExperimentStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExperimentStorage) EXPECT() *MockExperimentStorageMockRecorder {
	return m.recorder
}

// GetUserSegments mocks base method.
func (m *MockExperimentStorage) GetUserSegments(arg0 context.Context, userID int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSegments", arg0, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSegments indicates an expected call of GetUserSegments.
func (mr *MockExperimentStorageMockRecorder) GetUserSegments(arg0, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSegments", reflect.TypeOf((*MockExperimentStorage)(nil).GetUserSegments), arg0, userID)
}

// UpdateUserSegments mocks base method.
func (m *MockExperimentStorage) UpdateUserSegments(arg0 context.Context, userID int, toDel, toAdd []domain.Slug, delTime *t.CustomTime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSegments", arg0, userID, toDel, toAdd, delTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserSegments indicates an expected call of UpdateUserSegments.
func (mr *MockExperimentStorageMockRecorder) UpdateUserSegments(arg0, userID, toDel, toAdd, delTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSegments", reflect.TypeOf((*MockExperimentStorage)(nil).UpdateUserSegments), arg0, userID, toDel, toAdd, delTime)
}

// MockSegmentStorage is a mock of SegmentStorage interface.
type MockSegmentStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentStorageMockRecorder
}

// MockSegmentStorageMockRecorder is the mock recorder for MockSegmentStorage.
type MockSegmentStorageMockRecorder struct {
	mock *MockSegmentStorage
}

// NewMockSegmentStorage creates a new mock instance.
func NewMockSegmentStorage(ctrl *gomock.Controller) *MockSegmentStorage {
	mock := &MockSegmentStorage{ctrl: ctrl}
	mock.recorder = &MockSegmentStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentStorage) EXPECT() *MockSegmentStorageMockRecorder {
	return m.recorder
}

// CreateSegment mocks base method.
func (m *MockSegmentStorage) CreateSegment(arg0 context.Context, slug domain.Slug, autoaddPercent float32) (int, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", arg0, slug, autoaddPercent)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockSegmentStorageMockRecorder) CreateSegment(arg0, slug, autoaddPercent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockSegmentStorage)(nil).CreateSegment), arg0, slug, autoaddPercent)
}

// DeleteSegment mocks base method.
func (m *MockSegmentStorage) DeleteSegment(arg0 context.Context, slug domain.Slug) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", arg0, slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockSegmentStorageMockRecorder) DeleteSegment(arg0, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockSegmentStorage)(nil).DeleteSegment), arg0, slug)
}
